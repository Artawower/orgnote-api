/**
 * Org Note API
 * List of methods for work with Org Note.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: artawower@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface FilesUploadPostRequest
 */
export interface FilesUploadPostRequest {
    /**
     * files
     * @type {Array<string>}
     * @memberof FilesUploadPostRequest
     */
    'files': Array<string>;
}
/**
 *
 * @export
 * @interface HandlersCreatingNote
 */
export interface HandlersCreatingNote {
    /**
     *
     * @type {string}
     * @memberof HandlersCreatingNote
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof HandlersCreatingNote
     */
    'createdAt'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof HandlersCreatingNote
     */
    'filePath'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof HandlersCreatingNote
     */
    'id'?: string;
    /**
     *
     * @type {ModelsNoteMeta}
     * @memberof HandlersCreatingNote
     */
    'meta'?: ModelsNoteMeta;
    /**
     *
     * @type {string}
     * @memberof HandlersCreatingNote
     */
    'touchedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof HandlersCreatingNote
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface HandlersDeletedNote
 */
export interface HandlersDeletedNote {
    /**
     *
     * @type {Array<string>}
     * @memberof HandlersDeletedNote
     */
    'filePath'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof HandlersDeletedNote
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface HandlersHttpErrorAny
 */
export interface HandlersHttpErrorAny {
    /**
     *
     * @type {object}
     * @memberof HandlersHttpErrorAny
     */
    'data'?: object;
    /**
     *
     * @type {string}
     * @memberof HandlersHttpErrorAny
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseAnyAny
 */
export interface HandlersHttpResponseAnyAny {
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseAnyAny
     */
    'data'?: object;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseAnyAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseArrayModelsAPITokenAny
 */
export interface HandlersHttpResponseArrayModelsAPITokenAny {
    /**
     *
     * @type {Array<ModelsAPIToken>}
     * @memberof HandlersHttpResponseArrayModelsAPITokenAny
     */
    'data'?: Array<ModelsAPIToken>;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseArrayModelsAPITokenAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseArrayModelsPublicNoteModelsPagination
 */
export interface HandlersHttpResponseArrayModelsPublicNoteModelsPagination {
    /**
     *
     * @type {Array<ModelsPublicNote>}
     * @memberof HandlersHttpResponseArrayModelsPublicNoteModelsPagination
     */
    'data'?: Array<ModelsPublicNote>;
    /**
     *
     * @type {ModelsPagination}
     * @memberof HandlersHttpResponseArrayModelsPublicNoteModelsPagination
     */
    'meta'?: ModelsPagination;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseArrayStringAny
 */
export interface HandlersHttpResponseArrayStringAny {
    /**
     *
     * @type {Array<string>}
     * @memberof HandlersHttpResponseArrayStringAny
     */
    'data'?: Array<string>;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseArrayStringAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseHandlersOAuthRedirectDataAny
 */
export interface HandlersHttpResponseHandlersOAuthRedirectDataAny {
    /**
     *
     * @type {HandlersOAuthRedirectData}
     * @memberof HandlersHttpResponseHandlersOAuthRedirectDataAny
     */
    'data'?: HandlersOAuthRedirectData;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseHandlersOAuthRedirectDataAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseHandlersSyncNotesResponseAny
 */
export interface HandlersHttpResponseHandlersSyncNotesResponseAny {
    /**
     *
     * @type {HandlersSyncNotesResponse}
     * @memberof HandlersHttpResponseHandlersSyncNotesResponseAny
     */
    'data'?: HandlersSyncNotesResponse;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseHandlersSyncNotesResponseAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseModelsAPITokenAny
 */
export interface HandlersHttpResponseModelsAPITokenAny {
    /**
     *
     * @type {ModelsAPIToken}
     * @memberof HandlersHttpResponseModelsAPITokenAny
     */
    'data'?: ModelsAPIToken;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseModelsAPITokenAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseModelsPublicNoteAny
 */
export interface HandlersHttpResponseModelsPublicNoteAny {
    /**
     *
     * @type {ModelsPublicNote}
     * @memberof HandlersHttpResponseModelsPublicNoteAny
     */
    'data'?: ModelsPublicNote;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseModelsPublicNoteAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersHttpResponseModelsUserPersonalInfoAny
 */
export interface HandlersHttpResponseModelsUserPersonalInfoAny {
    /**
     *
     * @type {ModelsUserPersonalInfo}
     * @memberof HandlersHttpResponseModelsUserPersonalInfoAny
     */
    'data'?: ModelsUserPersonalInfo;
    /**
     *
     * @type {object}
     * @memberof HandlersHttpResponseModelsUserPersonalInfoAny
     */
    'meta'?: object;
}
/**
 *
 * @export
 * @interface HandlersOAuthRedirectData
 */
export interface HandlersOAuthRedirectData {
    /**
     *
     * @type {string}
     * @memberof HandlersOAuthRedirectData
     */
    'redirectUrl'?: string;
}
/**
 *
 * @export
 * @interface HandlersSubscribeBody
 */
export interface HandlersSubscribeBody {
    /**
     *
     * @type {string}
     * @memberof HandlersSubscribeBody
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof HandlersSubscribeBody
     */
    'token'?: string;
}
/**
 *
 * @export
 * @interface HandlersSyncNotesRequest
 */
export interface HandlersSyncNotesRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof HandlersSyncNotesRequest
     */
    'deletedNotesIds'?: Array<string>;
    /**
     *
     * @type {Array<HandlersCreatingNote>}
     * @memberof HandlersSyncNotesRequest
     */
    'notes'?: Array<HandlersCreatingNote>;
    /**
     *
     * @type {string}
     * @memberof HandlersSyncNotesRequest
     */
    'timestamp'?: string;
}
/**
 *
 * @export
 * @interface HandlersSyncNotesResponse
 */
export interface HandlersSyncNotesResponse {
    /**
     *
     * @type {Array<HandlersDeletedNote>}
     * @memberof HandlersSyncNotesResponse
     */
    'deletedNotes'?: Array<HandlersDeletedNote>;
    /**
     *
     * @type {Array<ModelsPublicNote>}
     * @memberof HandlersSyncNotesResponse
     */
    'notes'?: Array<ModelsPublicNote>;
}
/**
 *
 * @export
 * @interface ModelsAPIToken
 */
export interface ModelsAPIToken {
    /**
     *
     * @type {string}
     * @memberof ModelsAPIToken
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsAPIToken
     */
    'permission'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsAPIToken
     */
    'token'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ModelsCategory: {
    readonly CategoryArticle: "article";
    readonly CategoryBook: "book";
    readonly CategorySchedule: "schedule";
};
export type ModelsCategory = typeof ModelsCategory[keyof typeof ModelsCategory];
/**
 *
 * @export
 * @interface ModelsNoteHeading
 */
export interface ModelsNoteHeading {
    /**
     *
     * @type {number}
     * @memberof ModelsNoteHeading
     */
    'level'?: number;
    /**
     *
     * @type {string}
     * @memberof ModelsNoteHeading
     */
    'text'?: string;
}
/**
 *
 * @export
 * @interface ModelsNoteLink
 */
export interface ModelsNoteLink {
    /**
     *
     * @type {string}
     * @memberof ModelsNoteLink
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsNoteLink
     */
    'url'?: string;
}
/**
 *
 * @export
 * @interface ModelsNoteMeta
 */
export interface ModelsNoteMeta {
    /**
     *
     * @type {ModelsCategory}
     * @memberof ModelsNoteMeta
     */
    'category'?: ModelsCategory;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ModelsNoteMeta
     */
    'connectedNotes'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof ModelsNoteMeta
     */
    'description'?: string;
    /**
     *
     * @type {Array<ModelsNoteLink>}
     * @memberof ModelsNoteMeta
     */
    'externalLinks'?: Array<ModelsNoteLink>;
    /**
     *
     * @type {Array<string>}
     * @memberof ModelsNoteMeta
     */
    'fileTags'?: Array<string>;
    /**
     *
     * @type {Array<ModelsNoteHeading>}
     * @memberof ModelsNoteMeta
     */
    'headings'?: Array<ModelsNoteHeading>;
    /**
     *
     * @type {Array<string>}
     * @memberof ModelsNoteMeta
     */
    'images'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ModelsNoteMeta
     */
    'previewImg'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ModelsNoteMeta
     */
    'published'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ModelsNoteMeta
     */
    'startup'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsNoteMeta
     */
    'title'?: string;
}
/**
 *
 * @export
 * @interface ModelsPagination
 */
export interface ModelsPagination {
    /**
     *
     * @type {number}
     * @memberof ModelsPagination
     */
    'limit'?: number;
    /**
     *
     * @type {number}
     * @memberof ModelsPagination
     */
    'offset'?: number;
    /**
     *
     * @type {number}
     * @memberof ModelsPagination
     */
    'total'?: number;
}
/**
 *
 * @export
 * @interface ModelsPublicNote
 */
export interface ModelsPublicNote {
    /**
     *
     * @type {ModelsPublicUser}
     * @memberof ModelsPublicNote
     */
    'author'?: ModelsPublicUser;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicNote
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicNote
     */
    'createdAt'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ModelsPublicNote
     */
    'filePath'?: Array<string>;
    /**
     * It\'s externalID from original note
     * @type {string}
     * @memberof ModelsPublicNote
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ModelsPublicNote
     */
    'isMy'?: boolean;
    /**
     *
     * @type {ModelsNoteMeta}
     * @memberof ModelsPublicNote
     */
    'meta'?: ModelsNoteMeta;
    /**
     *
     * @type {number}
     * @memberof ModelsPublicNote
     */
    'size'?: number;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicNote
     */
    'touchedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicNote
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface ModelsPublicUser
 */
export interface ModelsPublicUser {
    /**
     *
     * @type {string}
     * @memberof ModelsPublicUser
     */
    'avatarUrl'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicUser
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicUser
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicUser
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicUser
     */
    'nickName'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPublicUser
     */
    'profileUrl'?: string;
}
/**
 *
 * @export
 * @interface ModelsUserPersonalInfo
 */
export interface ModelsUserPersonalInfo {
    /**
     *
     * @type {string}
     * @memberof ModelsUserPersonalInfo
     */
    'active'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsUserPersonalInfo
     */
    'avatarUrl'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsUserPersonalInfo
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsUserPersonalInfo
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsUserPersonalInfo
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsUserPersonalInfo
     */
    'nickName'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsUserPersonalInfo
     */
    'profileUrl'?: string;
    /**
     *
     * @type {number}
     * @memberof ModelsUserPersonalInfo
     */
    'spaceLimit'?: number;
    /**
     *
     * @type {number}
     * @memberof ModelsUserPersonalInfo
     */
    'usedSpace'?: number;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete user account
     * @summary Delete user account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAccountDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return all available API tokens
     * @summary Get API tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authApiTokensGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Callback for OAuth
     * @param {string} provider provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet: (provider: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Entrypoint for login
     * @summary OAuth Login
     * @param {string} provider provider
     * @param {string} [state] OAuth state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderLoginGet: (provider: string, state?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Subscribe for backend features, like sync notes
     * @summary Subscribe
     * @param {HandlersSubscribeBody} data token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSubscribePost: (data: HandlersSubscribeBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create API token
     * @summary Create API token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokenPost: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete API token
     * @summary Delete API token
     * @param {string} tokenId token id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokenTokenIdDelete: (tokenId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return found user by provided token
     * @summary Verify user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authVerifyGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * Delete user account
     * @summary Delete user account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAccountDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Return all available API tokens
     * @summary Get API tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authApiTokensGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseArrayModelsAPITokenAny>>;
    /**
     *
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Callback for OAuth
     * @param {string} provider provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet(provider: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Entrypoint for login
     * @summary OAuth Login
     * @param {string} provider provider
     * @param {string} [state] OAuth state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderLoginGet(provider: string, state?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseHandlersOAuthRedirectDataAny>>;
    /**
     * Subscribe for backend features, like sync notes
     * @summary Subscribe
     * @param {HandlersSubscribeBody} data token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSubscribePost(data: HandlersSubscribeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Create API token
     * @summary Create API token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokenPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseModelsAPITokenAny>>;
    /**
     * Delete API token
     * @summary Delete API token
     * @param {string} tokenId token id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokenTokenIdDelete(tokenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Return found user by provided token
     * @summary Verify user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authVerifyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseModelsUserPersonalInfoAny>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete user account
     * @summary Delete user account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAccountDelete(options?: any): AxiosPromise<object>;
    /**
     * Return all available API tokens
     * @summary Get API tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authApiTokensGet(options?: any): AxiosPromise<HandlersHttpResponseArrayModelsAPITokenAny>;
    /**
     *
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutGet(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Callback for OAuth
     * @param {string} provider provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet(provider: string, options?: any): AxiosPromise<object>;
    /**
     * Entrypoint for login
     * @summary OAuth Login
     * @param {string} provider provider
     * @param {string} [state] OAuth state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderLoginGet(provider: string, state?: string, options?: any): AxiosPromise<HandlersHttpResponseHandlersOAuthRedirectDataAny>;
    /**
     * Subscribe for backend features, like sync notes
     * @summary Subscribe
     * @param {HandlersSubscribeBody} data token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSubscribePost(data: HandlersSubscribeBody, options?: any): AxiosPromise<object>;
    /**
     * Create API token
     * @summary Create API token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokenPost(options?: any): AxiosPromise<HandlersHttpResponseModelsAPITokenAny>;
    /**
     * Delete API token
     * @summary Delete API token
     * @param {string} tokenId token id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokenTokenIdDelete(tokenId: string, options?: any): AxiosPromise<object>;
    /**
     * Return found user by provided token
     * @summary Verify user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authVerifyGet(options?: any): AxiosPromise<HandlersHttpResponseModelsUserPersonalInfoAny>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * Delete user account
     * @summary Delete user account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authAccountDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Return all available API tokens
     * @summary Get API tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authApiTokensGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseArrayModelsAPITokenAny, any>>;
    /**
     *
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authLogoutGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Callback for OAuth
     * @param {string} provider provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authProviderCallbackGet(provider: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Entrypoint for login
     * @summary OAuth Login
     * @param {string} provider provider
     * @param {string} [state] OAuth state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authProviderLoginGet(provider: string, state?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseHandlersOAuthRedirectDataAny, any>>;
    /**
     * Subscribe for backend features, like sync notes
     * @summary Subscribe
     * @param {HandlersSubscribeBody} data token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authSubscribePost(data: HandlersSubscribeBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Create API token
     * @summary Create API token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokenPost(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseModelsAPITokenAny, any>>;
    /**
     * Delete API token
     * @summary Delete API token
     * @param {string} tokenId token id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokenTokenIdDelete(tokenId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Return found user by provided token
     * @summary Verify user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authVerifyGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseModelsUserPersonalInfoAny, any>>;
}
/**
 * FilesApi - axios parameter creator
 * @export
 */
export declare const FilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Upload files.
     * @summary Upload files
     * @param {FilesUploadPostRequest} filesUploadPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesUploadPost: (filesUploadPostRequest: FilesUploadPostRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FilesApi - functional programming interface
 * @export
 */
export declare const FilesApiFp: (configuration?: Configuration) => {
    /**
     * Upload files.
     * @summary Upload files
     * @param {FilesUploadPostRequest} filesUploadPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesUploadPost(filesUploadPostRequest: FilesUploadPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * FilesApi - factory interface
 * @export
 */
export declare const FilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Upload files.
     * @summary Upload files
     * @param {FilesUploadPostRequest} filesUploadPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesUploadPost(filesUploadPostRequest: FilesUploadPostRequest, options?: any): AxiosPromise<object>;
};
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export declare class FilesApi extends BaseAPI {
    /**
     * Upload files.
     * @summary Upload files
     * @param {FilesUploadPostRequest} filesUploadPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    filesUploadPost(filesUploadPostRequest: FilesUploadPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * NotesApi - axios parameter creator
 * @export
 */
export declare const NotesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Bulk update or insert notes
     * @summary Upsert notes
     * @param {Array<HandlersCreatingNote>} notes List of crated notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesBulkUpsertPut: (notes: Array<HandlersCreatingNote>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Mark notes as deleted by provided list of ids
     * @summary Delete notes
     * @param {Array<string>} ids List of ids of deleted notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesDelete: (ids: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all notes with optional filter
     * @summary Get notes
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string} [userId] User id of which notes to load
     * @param {string} [searchText]
     * @param {boolean} [my] Load all my own notes (user will be used from provided token)
     * @param {string} [from]
     * @param {boolean} [includeDeleted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesGet: (limit?: number, offset?: number, userId?: string, searchText?: string, my?: boolean, from?: string, includeDeleted?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * get note by id
     * @summary Get note
     * @param {string} id Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create note
     * @summary Create note
     * @param {HandlersCreatingNote} note Note model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesPost: (note: HandlersCreatingNote, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Synchronize notes with specific timestamp
     * @summary Synchronize notes
     * @param {HandlersSyncNotesRequest} data Sync notes request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesSyncPost: (data: HandlersSyncNotesRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotesApi - functional programming interface
 * @export
 */
export declare const NotesApiFp: (configuration?: Configuration) => {
    /**
     * Bulk update or insert notes
     * @summary Upsert notes
     * @param {Array<HandlersCreatingNote>} notes List of crated notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesBulkUpsertPut(notes: Array<HandlersCreatingNote>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Mark notes as deleted by provided list of ids
     * @summary Delete notes
     * @param {Array<string>} ids List of ids of deleted notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesDelete(ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseAnyAny>>;
    /**
     * Get all notes with optional filter
     * @summary Get notes
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string} [userId] User id of which notes to load
     * @param {string} [searchText]
     * @param {boolean} [my] Load all my own notes (user will be used from provided token)
     * @param {string} [from]
     * @param {boolean} [includeDeleted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesGet(limit?: number, offset?: number, userId?: string, searchText?: string, my?: boolean, from?: string, includeDeleted?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseArrayModelsPublicNoteModelsPagination>>;
    /**
     * get note by id
     * @summary Get note
     * @param {string} id Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseModelsPublicNoteAny>>;
    /**
     * Create note
     * @summary Create note
     * @param {HandlersCreatingNote} note Note model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesPost(note: HandlersCreatingNote, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Synchronize notes with specific timestamp
     * @summary Synchronize notes
     * @param {HandlersSyncNotesRequest} data Sync notes request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesSyncPost(data: HandlersSyncNotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseHandlersSyncNotesResponseAny>>;
};
/**
 * NotesApi - factory interface
 * @export
 */
export declare const NotesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Bulk update or insert notes
     * @summary Upsert notes
     * @param {Array<HandlersCreatingNote>} notes List of crated notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesBulkUpsertPut(notes: Array<HandlersCreatingNote>, options?: any): AxiosPromise<object>;
    /**
     * Mark notes as deleted by provided list of ids
     * @summary Delete notes
     * @param {Array<string>} ids List of ids of deleted notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesDelete(ids: Array<string>, options?: any): AxiosPromise<HandlersHttpResponseAnyAny>;
    /**
     * Get all notes with optional filter
     * @summary Get notes
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string} [userId] User id of which notes to load
     * @param {string} [searchText]
     * @param {boolean} [my] Load all my own notes (user will be used from provided token)
     * @param {string} [from]
     * @param {boolean} [includeDeleted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesGet(limit?: number, offset?: number, userId?: string, searchText?: string, my?: boolean, from?: string, includeDeleted?: boolean, options?: any): AxiosPromise<HandlersHttpResponseArrayModelsPublicNoteModelsPagination>;
    /**
     * get note by id
     * @summary Get note
     * @param {string} id Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesIdGet(id: string, options?: any): AxiosPromise<HandlersHttpResponseModelsPublicNoteAny>;
    /**
     * Create note
     * @summary Create note
     * @param {HandlersCreatingNote} note Note model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesPost(note: HandlersCreatingNote, options?: any): AxiosPromise<object>;
    /**
     * Synchronize notes with specific timestamp
     * @summary Synchronize notes
     * @param {HandlersSyncNotesRequest} data Sync notes request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notesSyncPost(data: HandlersSyncNotesRequest, options?: any): AxiosPromise<HandlersHttpResponseHandlersSyncNotesResponseAny>;
};
/**
 * NotesApi - object-oriented interface
 * @export
 * @class NotesApi
 * @extends {BaseAPI}
 */
export declare class NotesApi extends BaseAPI {
    /**
     * Bulk update or insert notes
     * @summary Upsert notes
     * @param {Array<HandlersCreatingNote>} notes List of crated notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesBulkUpsertPut(notes: Array<HandlersCreatingNote>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Mark notes as deleted by provided list of ids
     * @summary Delete notes
     * @param {Array<string>} ids List of ids of deleted notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesDelete(ids: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseAnyAny, any>>;
    /**
     * Get all notes with optional filter
     * @summary Get notes
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string} [userId] User id of which notes to load
     * @param {string} [searchText]
     * @param {boolean} [my] Load all my own notes (user will be used from provided token)
     * @param {string} [from]
     * @param {boolean} [includeDeleted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesGet(limit?: number, offset?: number, userId?: string, searchText?: string, my?: boolean, from?: string, includeDeleted?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseArrayModelsPublicNoteModelsPagination, any>>;
    /**
     * get note by id
     * @summary Get note
     * @param {string} id Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseModelsPublicNoteAny, any>>;
    /**
     * Create note
     * @summary Create note
     * @param {HandlersCreatingNote} note Note model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesPost(note: HandlersCreatingNote, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Synchronize notes with specific timestamp
     * @summary Synchronize notes
     * @param {HandlersSyncNotesRequest} data Sync notes request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    notesSyncPost(data: HandlersSyncNotesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseHandlersSyncNotesResponseAny, any>>;
}
/**
 * TagsApi - axios parameter creator
 * @export
 */
export declare const TagsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Return list of al registered tags
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TagsApi - functional programming interface
 * @export
 */
export declare const TagsApiFp: (configuration?: Configuration) => {
    /**
     * Return list of al registered tags
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlersHttpResponseArrayStringAny>>;
};
/**
 * TagsApi - factory interface
 * @export
 */
export declare const TagsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Return list of al registered tags
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsGet(options?: any): AxiosPromise<HandlersHttpResponseArrayStringAny>;
};
/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export declare class TagsApi extends BaseAPI {
    /**
     * Return list of al registered tags
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    tagsGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HandlersHttpResponseArrayStringAny, any>>;
}
